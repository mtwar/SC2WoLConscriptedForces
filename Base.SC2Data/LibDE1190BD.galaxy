include "TriggerLibs/NativeLib"

include "LibDE1190BD_h"

//--------------------------------------------------------------------------------------------------
// Library: Nightmare
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libDE1190BD_InitLibraries () {
    libNtve_InitVariables();
}

// Functions
void libDE1190BD_gf_SendFlexibleAttackWave (string lp_unitType, int lp_seconds, int lp_maxAdd, int lp_player) {
    // Variable Declarations
    int lv_grace;
    int lv_plusorMinus90;
    int lv_extraUnits;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_plusorMinus90 = RandomInt(-90, 90);
    lv_extraUnits = RoundI((((lv_plusorMinus90 + 90) / 180) * lp_maxAdd));
    AIAttackWaveAddUnits4(0, 0, lv_extraUnits, lv_extraUnits, lp_unitType);
    AIAttackWaveSend(lp_player, (lp_seconds + lv_plusorMinus90), false);
    Wait(lp_seconds, c_timeAI);
}

void libDE1190BD_gf_SendFlexibleAttackWaveNoWait (string lp_unitType, int lp_seconds, int lp_maxAdd, int lp_player) {
    // Variable Declarations
    int lv_plusorMinus90;
    int lv_extraUnits;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_plusorMinus90 = RandomInt(-90, 90);
    lv_extraUnits = RoundI((((lv_plusorMinus90 + 90) / 180) * lp_maxAdd));
    AIAttackWaveAddUnits4(0, 0, lv_extraUnits, lv_extraUnits, lp_unitType);
    AIAttackWaveSend(lp_player, (lp_seconds + lv_plusorMinus90), false);
}

void libDE1190BD_gf_MakeBullies (int lp_amount, string lp_unit, region lp_region, int lp_player, int lp_rebuildCount) {
    // Automatic Variable Declarations
    int auto7B517E27_n;
    int auto7B517E27_i;

    // Implementation
    auto7B517E27_n = lp_amount;
    for (auto7B517E27_i = 1; auto7B517E27_i <= auto7B517E27_n; auto7B517E27_i += 1) {
        AIAddBully(lp_player, lp_unit, RegionRandomPoint(lp_region), lp_rebuildCount);
    }
}

void libDE1190BD_gf_TaldarimSkins (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "NexusForged", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "PylonForged", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "AssimilatorForged", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "GatewayForged", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "CyberneticsCoreForged", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ForgeForged", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "PhotonCannonForged", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ShieldBatteryForged", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "TwilightCouncilForged", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "DarkShrineForged", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "TemplarArchiveForged", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "RoboticsFacilityForged", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "RoboticsBayForged", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "StargateForged", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "FleetBeaconForged", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "CarrierTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ColossusTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "DarkTemplarTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "HighTemplarTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ImmortalTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "PhoenixTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ProbeTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ScoutTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "SentryTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "StalkerTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "VoidRayTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "WarpPrismTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ZealotTaldarim", true);
}

void libDE1190BD_gf_SingleTarget (unit lp_unit, abilcmd lp_ability, int lp_vitality, int lp_amount, int lp_range) {
    // Automatic Variable Declarations
    unitgroup auto26CE0903_g;
    int auto26CE0903_u;
    unit auto26CE0903_var;

    // Implementation
    auto26CE0903_g = UnitGroupAlliance(UnitGetOwner(lp_unit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_unit), lp_range), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto26CE0903_u = UnitGroupCount(auto26CE0903_g, c_unitCountAll);
    for (;; auto26CE0903_u -= 1) {
        auto26CE0903_var = UnitGroupUnitFromEnd(auto26CE0903_g, auto26CE0903_u);
        if (auto26CE0903_var == null) { break; }
        if ((UnitGetPropertyFixed(auto26CE0903_var, lp_vitality, c_unitPropCurrent) >= lp_amount)) {
            UnitIssueOrder(lp_unit, OrderTargetingUnit(lp_ability, auto26CE0903_var), c_orderQueueAddToFront);
            AISetUnitScriptControlled(lp_unit, false);
        }

    }
}

void libDE1190BD_gf_PointAoE (unit lp_unit, abilcmd lp_ability, int lp_amount, int lp_range) {
    // Automatic Variable Declarations
    unitgroup auto259FA10A_g;
    int auto259FA10A_u;
    unit auto259FA10A_var;

    // Implementation
    auto259FA10A_g = UnitGroupAlliance(UnitGetOwner(lp_unit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_unit), lp_range), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto259FA10A_u = UnitGroupCount(auto259FA10A_g, c_unitCountAll);
    for (;; auto259FA10A_u -= 1) {
        auto259FA10A_var = UnitGroupUnitFromEnd(auto259FA10A_g, auto259FA10A_u);
        if (auto259FA10A_var == null) { break; }
        if ((UnitGroupCount(UnitGroupAlliance(UnitGetOwner(lp_unit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(auto259FA10A_var), 2.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > lp_amount)) {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(lp_ability, UnitGetPosition(auto259FA10A_var)), c_orderQueueAddToFront);
            AISetUnitScriptControlled(lp_unit, false);
        }

    }
}

void libDE1190BD_gf_PointAoEGroundOnly (unit lp_unit, abilcmd lp_ability, int lp_amount, int lp_range) {
    // Automatic Variable Declarations
    unitgroup auto144AC15D_g;
    int auto144AC15D_u;
    unit auto144AC15D_var;

    // Implementation
    auto144AC15D_g = UnitGroupAlliance(UnitGetOwner(lp_unit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_unit), lp_range), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto144AC15D_u = UnitGroupCount(auto144AC15D_g, c_unitCountAll);
    for (;; auto144AC15D_u -= 1) {
        auto144AC15D_var = UnitGroupUnitFromEnd(auto144AC15D_g, auto144AC15D_u);
        if (auto144AC15D_var == null) { break; }
        if ((UnitGroupCount(UnitGroupAlliance(UnitGetOwner(lp_unit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(auto144AC15D_var), 1.5), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > lp_amount)) {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(lp_ability, UnitGetPosition(auto144AC15D_var)), c_orderQueueAddToFront);
            AISetUnitScriptControlled(lp_unit, false);
        }

    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Lower Than Brutal
//--------------------------------------------------------------------------------------------------
bool libDE1190BD_gt_LowerThanBrutal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DifficultyValueInt(1, 1, 1, 0) == 1)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/lib_DE1190BD_363FDA0D"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDE1190BD_gt_LowerThanBrutal_Init () {
    libDE1190BD_gt_LowerThanBrutal = TriggerCreate("libDE1190BD_gt_LowerThanBrutal_Func");
    TriggerAddEventTimePeriodic(libDE1190BD_gt_LowerThanBrutal, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Force Cheater
//--------------------------------------------------------------------------------------------------
bool libDE1190BD_gt_ForceCheater_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AchievementsDisable(1);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDE1190BD_gt_ForceCheater_Init () {
    libDE1190BD_gt_ForceCheater = TriggerCreate("libDE1190BD_gt_ForceCheater_Func");
    TriggerAddEventTimePeriodic(libDE1190BD_gt_ForceCheater, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Run All Custom AI
//--------------------------------------------------------------------------------------------------
bool libDE1190BD_gt_RunAllCustomAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libDE1190BD_gt_RunProtossAI, true, false);
    TriggerExecute(libDE1190BD_gt_RunTerranAI, true, false);
    TriggerExecute(libDE1190BD_gt_RunZergAI, true, false);
    TechTreeUnitAllow(1, "MercCompound", true);
    TechTreeAbilityAllow(1, AbilityCommand("TerranBuild", 12), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDE1190BD_gt_RunAllCustomAI_Init () {
    libDE1190BD_gt_RunAllCustomAI = TriggerCreate("libDE1190BD_gt_RunAllCustomAI_Func");
    TriggerAddEventMapInit(libDE1190BD_gt_RunAllCustomAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Run Zerg AI
//--------------------------------------------------------------------------------------------------
bool libDE1190BD_gt_RunZergAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libDE1190BD_gt_Infestor, true, false);
    TriggerExecute(libDE1190BD_gt_BroodQueen, true, false);
    TriggerExecute(libDE1190BD_gt_LowerThanBrutal, true, false);
    TriggerExecute(libDE1190BD_gt_Brutalisk, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDE1190BD_gt_RunZergAI_Init () {
    libDE1190BD_gt_RunZergAI = TriggerCreate("libDE1190BD_gt_RunZergAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Run Terran AI
//--------------------------------------------------------------------------------------------------
bool libDE1190BD_gt_RunTerranAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libDE1190BD_gt_Marine, true, false);
    TriggerExecute(libDE1190BD_gt_Ghost, true, false);
    TriggerExecute(libDE1190BD_gt_Reaper, true, false);
    TriggerExecute(libDE1190BD_gt_Raven, true, false);
    TriggerExecute(libDE1190BD_gt_Banshee, true, false);
    TriggerExecute(libDE1190BD_gt_Wraith, true, false);
    TriggerExecute(libDE1190BD_gt_LowerThanBrutal, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDE1190BD_gt_RunTerranAI_Init () {
    libDE1190BD_gt_RunTerranAI = TriggerCreate("libDE1190BD_gt_RunTerranAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Run Protoss AI
//--------------------------------------------------------------------------------------------------
bool libDE1190BD_gt_RunProtossAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libDE1190BD_gt_HighTemplar, true, false);
    TriggerExecute(libDE1190BD_gt_Stalker, true, false);
    TriggerExecute(libDE1190BD_gt_Ascendent, true, false);
    TriggerExecute(libDE1190BD_gt_Wrathwalker, true, false);
    TriggerExecute(libDE1190BD_gt_LowerThanBrutal, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDE1190BD_gt_RunProtossAI_Init () {
    libDE1190BD_gt_RunProtossAI = TriggerCreate("libDE1190BD_gt_RunProtossAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infestor
//--------------------------------------------------------------------------------------------------
bool libDE1190BD_gt_Infestor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_localUnit;

    // Automatic Variable Declarations
    unitgroup autoB2FB77C2_g;
    int autoB2FB77C2_u;
    unit autoB2FB77C2_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        autoB2FB77C2_g = UnitGroup("Infestor", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoB2FB77C2_u = UnitGroupCount(autoB2FB77C2_g, c_unitCountAll);
        for (;; autoB2FB77C2_u -= 1) {
            autoB2FB77C2_var = UnitGroupUnitFromEnd(autoB2FB77C2_g, autoB2FB77C2_u);
            if (autoB2FB77C2_var == null) { break; }
            if ((UnitGetOwner(autoB2FB77C2_var) != 1)) {
                if ((UnitGroupCount(UnitGroupAlliance(UnitGetOwner(autoB2FB77C2_var), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(autoB2FB77C2_var), 10.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 4) && (UnitAbilityCheck(autoB2FB77C2_var, "FungalGrowth", true) == true)) {
                    libDE1190BD_gf_PointAoE(autoB2FB77C2_var, AbilityCommand("FungalGrowth", 0), 2, 8);
                }
                else {
                    if ((UnitGroupCount(UnitGroupAlliance(UnitGetOwner(autoB2FB77C2_var), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(autoB2FB77C2_var), 10.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 1)) {
                        UnitIssueOrder(autoB2FB77C2_var, OrderTargetingPoint(AbilityCommand("InfestedTerrans", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(autoB2FB77C2_var), 1.5, UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(UnitGetOwner(autoB2FB77C2_var), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(autoB2FB77C2_var), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)))), c_orderQueueAddToFront);
                    }

                }
                if ((UnitGroupCount(UnitGroupAlliance(UnitGetOwner(autoB2FB77C2_var), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(autoB2FB77C2_var), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 1)) {
                    lv_localUnit = UnitGroupRandomUnit(UnitGroupAlliance(UnitGetOwner(autoB2FB77C2_var), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(autoB2FB77C2_var), 10.0), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                    if (((UnitGetPropertyFixed(lv_localUnit, c_unitPropVitalityMax, c_unitPropCurrent) >= 120.0) || (UnitGetType(lv_localUnit) == "SiegeTankSieged") || (UnitGetType(lv_localUnit) == "SiegeTank"))) {
                        UnitIssueOrder(autoB2FB77C2_var, OrderTargetingUnit(AbilityCommand("NeuralParasite", 0), lv_localUnit), c_orderQueueReplace);
                    }

                }

            }

        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDE1190BD_gt_Infestor_Init () {
    libDE1190BD_gt_Infestor = TriggerCreate("libDE1190BD_gt_Infestor_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brood Queen
//--------------------------------------------------------------------------------------------------
bool libDE1190BD_gt_BroodQueen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_localUnit;

    // Automatic Variable Declarations
    unitgroup autoC8212BFE_g;
    int autoC8212BFE_u;
    unit autoC8212BFE_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        autoC8212BFE_g = UnitGroup("Infestor", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoC8212BFE_u = UnitGroupCount(autoC8212BFE_g, c_unitCountAll);
        for (;; autoC8212BFE_u -= 1) {
            autoC8212BFE_var = UnitGroupUnitFromEnd(autoC8212BFE_g, autoC8212BFE_u);
            if (autoC8212BFE_var == null) { break; }
            if ((UnitGetOwner(autoC8212BFE_var) != 1)) {
                if ((UnitGroupCount(UnitGroupAlliance(UnitGetOwner(autoC8212BFE_var), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(autoC8212BFE_var), 10.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 4)) {
                    libDE1190BD_gf_PointAoE(autoC8212BFE_var, AbilityCommand("QueenMPEnsnare", 0), 2, 8);
                }

                if ((UnitGroupCount(UnitGroupAlliance(UnitGetOwner(autoC8212BFE_var), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(autoC8212BFE_var), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 1)) {
                    lv_localUnit = UnitGroupRandomUnit(UnitGroupAlliance(UnitGetOwner(autoC8212BFE_var), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(autoC8212BFE_var), 10.0), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                    if (((UnitGetPropertyFixed(lv_localUnit, c_unitPropVitalityMax, c_unitPropCurrent) >= 120.0) || (UnitGetType(lv_localUnit) == "SiegeTankSieged") || (UnitGetType(lv_localUnit) == "SiegeTank"))) {
                        UnitIssueOrder(autoC8212BFE_var, OrderTargetingUnit(AbilityCommand("QueenMPSpawnBroodlings", 0), lv_localUnit), c_orderQueueReplace);
                    }

                }

            }

        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDE1190BD_gt_BroodQueen_Init () {
    libDE1190BD_gt_BroodQueen = TriggerCreate("libDE1190BD_gt_BroodQueen_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brutalisk
//--------------------------------------------------------------------------------------------------
bool libDE1190BD_gt_Brutalisk_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto63D0E72A_g;
    int auto63D0E72A_u;
    unit auto63D0E72A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        auto63D0E72A_g = UnitGroup("Brutalisk", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto63D0E72A_u = UnitGroupCount(auto63D0E72A_g, c_unitCountAll);
        for (;; auto63D0E72A_u -= 1) {
            auto63D0E72A_var = UnitGroupUnitFromEnd(auto63D0E72A_g, auto63D0E72A_u);
            if (auto63D0E72A_var == null) { break; }
            if ((UnitGetOwner(auto63D0E72A_var) != 1) && (UnitGetPropertyFixed(auto63D0E72A_var, c_unitPropLifePercent, c_unitPropCurrent) <= 75.0) && (UnitGroupCount(UnitGroupAlliance(UnitGetOwner(auto63D0E72A_var), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(auto63D0E72A_var), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 4)) {
                UnitIssueOrder(auto63D0E72A_var, Order(AbilityCommand("HybridFAoEStun", 0)), c_orderQueueAddToFront);
            }

        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDE1190BD_gt_Brutalisk_Init () {
    libDE1190BD_gt_Brutalisk = TriggerCreate("libDE1190BD_gt_Brutalisk_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Marine
//--------------------------------------------------------------------------------------------------
bool libDE1190BD_gt_Marine_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto542D7236_g;
    int auto542D7236_u;
    unit auto542D7236_var;
    unitgroup autoC3DC3B06_g;
    int autoC3DC3B06_u;
    unit autoC3DC3B06_var;

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        auto542D7236_g = UnitGroup("Marine", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto542D7236_u = UnitGroupCount(auto542D7236_g, c_unitCountAll);
        for (;; auto542D7236_u -= 1) {
            auto542D7236_var = UnitGroupUnitFromEnd(auto542D7236_g, auto542D7236_u);
            if (auto542D7236_var == null) { break; }
            if ((UnitGetOwner(auto542D7236_var) != 1) && (TechTreeUpgradeCount(UnitGetOwner(auto542D7236_var), "MarineStimpack", c_techCountQueuedOrBetter) == 1) && (UnitHasBehavior(auto542D7236_var, "Stimpack") == false)) {
                if ((UnitGroupCount(UnitGroupAlliance(UnitGetOwner(auto542D7236_var), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(auto542D7236_var), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (UnitGroupCount(UnitGroupAlliance(UnitGetOwner(auto542D7236_var), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(auto542D7236_var), 9.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 2)) {
                    UnitIssueOrder(auto542D7236_var, Order(AbilityCommand("Stimpack", 0)), c_orderQueueAddToFront);
                    AISetUnitScriptControlled(UnitLastCreated(), false);
                }

            }

        }
        autoC3DC3B06_g = UnitGroup("WarPig", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoC3DC3B06_u = UnitGroupCount(autoC3DC3B06_g, c_unitCountAll);
        for (;; autoC3DC3B06_u -= 1) {
            autoC3DC3B06_var = UnitGroupUnitFromEnd(autoC3DC3B06_g, autoC3DC3B06_u);
            if (autoC3DC3B06_var == null) { break; }
            if ((UnitGetOwner(autoC3DC3B06_var) != 1) && (TechTreeUpgradeCount(UnitGetOwner(autoC3DC3B06_var), "MarineStimpack", c_techCountQueuedOrBetter) == 1) && (UnitHasBehavior(autoC3DC3B06_var, "Stimpack") == false)) {
                if ((UnitGroupCount(UnitGroupAlliance(UnitGetOwner(autoC3DC3B06_var), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(autoC3DC3B06_var), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (UnitGroupCount(UnitGroupAlliance(UnitGetOwner(autoC3DC3B06_var), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(autoC3DC3B06_var), 9.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 2)) {
                    UnitIssueOrder(autoC3DC3B06_var, Order(AbilityCommand("Stimpack", 0)), c_orderQueueAddToFront);
                    AISetUnitScriptControlled(UnitLastCreated(), false);
                }

            }

        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDE1190BD_gt_Marine_Init () {
    libDE1190BD_gt_Marine = TriggerCreate("libDE1190BD_gt_Marine_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reaper
//--------------------------------------------------------------------------------------------------
bool libDE1190BD_gt_Reaper_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_localUnit;

    // Automatic Variable Declarations
    unitgroup auto0458E0FE_g;
    int auto0458E0FE_u;
    unit auto0458E0FE_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        auto0458E0FE_g = UnitGroup("Reaper", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto0458E0FE_u = UnitGroupCount(auto0458E0FE_g, c_unitCountAll);
        for (;; auto0458E0FE_u -= 1) {
            auto0458E0FE_var = UnitGroupUnitFromEnd(auto0458E0FE_g, auto0458E0FE_u);
            if (auto0458E0FE_var == null) { break; }
            if ((UnitGetOwner(auto0458E0FE_var) != 1)) {
                libDE1190BD_gf_PointAoEGroundOnly(auto0458E0FE_var, AbilityCommand("D8Charge", 0), 4, 6);
            }

        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDE1190BD_gt_Reaper_Init () {
    libDE1190BD_gt_Reaper = TriggerCreate("libDE1190BD_gt_Reaper_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ghost
//--------------------------------------------------------------------------------------------------
bool libDE1190BD_gt_Ghost_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_localUnit;

    // Automatic Variable Declarations
    unitgroup autoAE8689A2_g;
    int autoAE8689A2_u;
    unit autoAE8689A2_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        autoAE8689A2_g = UnitGroup("Ghost", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoAE8689A2_u = UnitGroupCount(autoAE8689A2_g, c_unitCountAll);
        for (;; autoAE8689A2_u -= 1) {
            autoAE8689A2_var = UnitGroupUnitFromEnd(autoAE8689A2_g, autoAE8689A2_u);
            if (autoAE8689A2_var == null) { break; }
            if ((UnitGetOwner(autoAE8689A2_var) != 1)) {
                libDE1190BD_gf_SingleTarget(autoAE8689A2_var, AbilityCommand("Snipe", 0), c_unitPropLife, 100, 8);
                if ((UnitGroupCount(UnitGroupAlliance(UnitGetOwner(autoAE8689A2_var), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(autoAE8689A2_var), 10.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 4)) {
                    AISetUnitScriptControlled(UnitLastCreated(), true);
                    UnitIssueOrder(autoAE8689A2_var, Order(AbilityCommand("GhostCloak", 0)), c_orderQueueReplace);
                    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("TacNukeStrike", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(UnitGetOwner(autoAE8689A2_var), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(autoAE8689A2_var), 10.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
                    AISetUnitScriptControlled(UnitLastCreated(), false);
                }

                if ((UnitGroupCount(UnitGroupAlliance(UnitGetOwner(autoAE8689A2_var), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(autoAE8689A2_var), 5.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (UnitGroupCount(UnitGroupAlliance(UnitGetOwner(autoAE8689A2_var), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(autoAE8689A2_var), 9.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 2) && (UnitHasBehavior(autoAE8689A2_var, "GhostCloak") == false)) {
                    UnitIssueOrder(autoAE8689A2_var, Order(AbilityCommand("GhostCloak", 0)), c_orderQueueAddToFront);
                    AISetUnitScriptControlled(UnitLastCreated(), false);
                }

            }

        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDE1190BD_gt_Ghost_Init () {
    libDE1190BD_gt_Ghost = TriggerCreate("libDE1190BD_gt_Ghost_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Banshee
//--------------------------------------------------------------------------------------------------
bool libDE1190BD_gt_Banshee_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_localUnit;

    // Automatic Variable Declarations
    unitgroup auto4CC3FEA6_g;
    int auto4CC3FEA6_u;
    unit auto4CC3FEA6_var;
    unitgroup autoD1C9CD92_g;
    int autoD1C9CD92_u;
    unit autoD1C9CD92_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        auto4CC3FEA6_g = UnitGroup("Banshee", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto4CC3FEA6_u = UnitGroupCount(auto4CC3FEA6_g, c_unitCountAll);
        for (;; auto4CC3FEA6_u -= 1) {
            auto4CC3FEA6_var = UnitGroupUnitFromEnd(auto4CC3FEA6_g, auto4CC3FEA6_u);
            if (auto4CC3FEA6_var == null) { break; }
            if ((UnitGetOwner(auto4CC3FEA6_var) != 1)) {
                if ((UnitGroupCount(UnitGroupAlliance(UnitGetOwner(auto4CC3FEA6_var), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(auto4CC3FEA6_var), 5.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (UnitGroupCount(UnitGroupAlliance(UnitGetOwner(auto4CC3FEA6_var), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(auto4CC3FEA6_var), 9.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 2) && (UnitHasBehavior(auto4CC3FEA6_var, "BansheeCloak") == false)) {
                    UnitIssueOrder(auto4CC3FEA6_var, Order(AbilityCommand("BansheeCloak", 0)), c_orderQueueAddToFront);
                    AISetUnitScriptControlled(UnitLastCreated(), false);
                }

                if ((UnitGroupCount(UnitGroupAlliance(UnitGetOwner(auto4CC3FEA6_var), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(auto4CC3FEA6_var), 9.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 2) && (UnitHasBehavior(auto4CC3FEA6_var, "BansheeCloak") == true)) {
                    UnitIssueOrder(auto4CC3FEA6_var, Order(AbilityCommand("BansheeCloak", 1)), c_orderQueueAddToFront);
                    AISetUnitScriptControlled(UnitLastCreated(), false);
                }

            }

        }
        autoD1C9CD92_g = UnitGroup("DuskWing", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoD1C9CD92_u = UnitGroupCount(autoD1C9CD92_g, c_unitCountAll);
        for (;; autoD1C9CD92_u -= 1) {
            autoD1C9CD92_var = UnitGroupUnitFromEnd(autoD1C9CD92_g, autoD1C9CD92_u);
            if (autoD1C9CD92_var == null) { break; }
            if ((UnitGetOwner(autoD1C9CD92_var) != 1)) {
                if ((UnitGroupCount(UnitGroupAlliance(UnitGetOwner(autoD1C9CD92_var), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(autoD1C9CD92_var), 5.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (UnitGroupCount(UnitGroupAlliance(UnitGetOwner(autoD1C9CD92_var), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(autoD1C9CD92_var), 9.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 2) && (UnitHasBehavior(autoD1C9CD92_var, "BansheeCloak") == false)) {
                    UnitIssueOrder(autoD1C9CD92_var, Order(AbilityCommand("DuskWingBansheeCloakingField", 0)), c_orderQueueAddToFront);
                    AISetUnitScriptControlled(UnitLastCreated(), false);
                }

                if ((UnitGroupCount(UnitGroupAlliance(UnitGetOwner(autoD1C9CD92_var), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(autoD1C9CD92_var), 9.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 2) && (UnitHasBehavior(autoD1C9CD92_var, "BansheeCloak") == true)) {
                    UnitIssueOrder(autoD1C9CD92_var, Order(AbilityCommand("DuskWingBansheeCloakingField", 1)), c_orderQueueAddToFront);
                    AISetUnitScriptControlled(UnitLastCreated(), false);
                }

            }

        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDE1190BD_gt_Banshee_Init () {
    libDE1190BD_gt_Banshee = TriggerCreate("libDE1190BD_gt_Banshee_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wraith
//--------------------------------------------------------------------------------------------------
bool libDE1190BD_gt_Wraith_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_localUnit;

    // Automatic Variable Declarations
    unitgroup auto41DEC423_g;
    int auto41DEC423_u;
    unit auto41DEC423_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        auto41DEC423_g = UnitGroup("Wraith", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto41DEC423_u = UnitGroupCount(auto41DEC423_g, c_unitCountAll);
        for (;; auto41DEC423_u -= 1) {
            auto41DEC423_var = UnitGroupUnitFromEnd(auto41DEC423_g, auto41DEC423_u);
            if (auto41DEC423_var == null) { break; }
            if ((UnitGetOwner(auto41DEC423_var) != 1)) {
                if ((UnitGroupCount(UnitGroupAlliance(UnitGetOwner(auto41DEC423_var), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(auto41DEC423_var), 5.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (UnitGroupCount(UnitGroupAlliance(UnitGetOwner(auto41DEC423_var), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(auto41DEC423_var), 9.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 2) && (UnitHasBehavior(auto41DEC423_var, "WraithCloak") == false)) {
                    UnitIssueOrder(auto41DEC423_var, Order(AbilityCommand("WraithCloak", 0)), c_orderQueueAddToFront);
                    AISetUnitScriptControlled(UnitLastCreated(), false);
                }

                if ((UnitGroupCount(UnitGroupAlliance(UnitGetOwner(auto41DEC423_var), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(auto41DEC423_var), 9.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 2) && (UnitHasBehavior(auto41DEC423_var, "WraithCloak") == true)) {
                    UnitIssueOrder(auto41DEC423_var, Order(AbilityCommand("WraithCloak", 1)), c_orderQueueAddToFront);
                    AISetUnitScriptControlled(UnitLastCreated(), false);
                }

            }

        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDE1190BD_gt_Wraith_Init () {
    libDE1190BD_gt_Wraith = TriggerCreate("libDE1190BD_gt_Wraith_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raven
//--------------------------------------------------------------------------------------------------
bool libDE1190BD_gt_Raven_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_localUnit;

    // Automatic Variable Declarations
    unitgroup auto641B5307_g;
    int auto641B5307_u;
    unit auto641B5307_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        auto641B5307_g = UnitGroup("Raven", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto641B5307_u = UnitGroupCount(auto641B5307_g, c_unitCountAll);
        for (;; auto641B5307_u -= 1) {
            auto641B5307_var = UnitGroupUnitFromEnd(auto641B5307_g, auto641B5307_u);
            if (auto641B5307_var == null) { break; }
            if ((UnitGetOwner(auto641B5307_var) != 1) && (UnitGroupCount(UnitGroupAlliance(UnitGetOwner(auto641B5307_var), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(auto641B5307_var), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
                libDE1190BD_gf_SingleTarget(auto641B5307_var, AbilityCommand("SeekerMissile", 0), c_unitPropLife, 45, 8);
                UnitIssueOrder(auto641B5307_var, OrderTargetingPoint(AbilityCommand("BuildAutoTurret", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(auto641B5307_var), 1.5, UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(UnitGetOwner(auto641B5307_var), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(auto641B5307_var), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)))), c_orderQueueAddToFront);
            }

        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDE1190BD_gt_Raven_Init () {
    libDE1190BD_gt_Raven = TriggerCreate("libDE1190BD_gt_Raven_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stalker
//--------------------------------------------------------------------------------------------------
bool libDE1190BD_gt_Stalker_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoDE64730A_g;
    int autoDE64730A_u;
    unit autoDE64730A_var;
    unitgroup autoC5C709A4_g;
    int autoC5C709A4_u;
    unit autoC5C709A4_var;

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        autoDE64730A_g = UnitGroup("Stalker", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoDE64730A_u = UnitGroupCount(autoDE64730A_g, c_unitCountAll);
        for (;; autoDE64730A_u -= 1) {
            autoDE64730A_var = UnitGroupUnitFromEnd(autoDE64730A_g, autoDE64730A_u);
            if (autoDE64730A_var == null) { break; }
            if ((UnitGetOwner(autoDE64730A_var) != 1) && (UnitGetPropertyFixed(autoDE64730A_var, c_unitPropShields, c_unitPropCurrent) <= 2.0) && (UnitGroupCount(UnitGroupAlliance(UnitGetOwner(autoDE64730A_var), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(autoDE64730A_var), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 2) && (UnitGetType(AILastAttacker(autoDE64730A_var)) != "SiegeTankSieged")) {
                UnitIssueOrder(autoDE64730A_var, OrderTargetingPoint(AbilityCommand("Blink", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(autoDE64730A_var), -6.0, UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(UnitGetOwner(autoDE64730A_var), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(autoDE64730A_var), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)))), c_orderQueueAddToFront);
            }

        }
        autoC5C709A4_g = UnitGroup("StalkerShakuras", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoC5C709A4_u = UnitGroupCount(autoC5C709A4_g, c_unitCountAll);
        for (;; autoC5C709A4_u -= 1) {
            autoC5C709A4_var = UnitGroupUnitFromEnd(autoC5C709A4_g, autoC5C709A4_u);
            if (autoC5C709A4_var == null) { break; }
            if ((UnitGetOwner(autoC5C709A4_var) != 1) && (UnitGetPropertyFixed(autoC5C709A4_var, c_unitPropShields, c_unitPropCurrent) <= 2.0) && (UnitGroupCount(UnitGroupAlliance(UnitGetOwner(autoC5C709A4_var), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(autoC5C709A4_var), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 2) && (UnitGetType(AILastAttacker(autoC5C709A4_var)) != "SiegeTankSieged")) {
                UnitIssueOrder(autoC5C709A4_var, OrderTargetingPoint(AbilityCommand("BlinkShieldRestore", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(autoC5C709A4_var), -6.0, UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(UnitGetOwner(autoC5C709A4_var), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(autoC5C709A4_var), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)))), c_orderQueueAddToFront);
            }

        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDE1190BD_gt_Stalker_Init () {
    libDE1190BD_gt_Stalker = TriggerCreate("libDE1190BD_gt_Stalker_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: High Templar
//--------------------------------------------------------------------------------------------------
bool libDE1190BD_gt_HighTemplar_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_localUnit;

    // Automatic Variable Declarations
    unitgroup auto2C20FF85_g;
    int auto2C20FF85_u;
    unit auto2C20FF85_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        auto2C20FF85_g = UnitGroup("HighTemplar", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto2C20FF85_u = UnitGroupCount(auto2C20FF85_g, c_unitCountAll);
        for (;; auto2C20FF85_u -= 1) {
            auto2C20FF85_var = UnitGroupUnitFromEnd(auto2C20FF85_g, auto2C20FF85_u);
            if (auto2C20FF85_var == null) { break; }
            if ((UnitGetOwner(auto2C20FF85_var) != 1)) {
                libDE1190BD_gf_PointAoE(auto2C20FF85_var, AbilityCommand("PsiStorm", 0), 3, 10);
                libDE1190BD_gf_SingleTarget(auto2C20FF85_var, AbilityCommand("Feedback", 0), c_unitPropEnergy, 72, 7);
            }

        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDE1190BD_gt_HighTemplar_Init () {
    libDE1190BD_gt_HighTemplar = TriggerCreate("libDE1190BD_gt_HighTemplar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ascendent
//--------------------------------------------------------------------------------------------------
bool libDE1190BD_gt_Ascendent_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto8B14683E_g;
    int auto8B14683E_u;
    unit auto8B14683E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        auto8B14683E_g = UnitGroup("HighTemplarTaldarim", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto8B14683E_u = UnitGroupCount(auto8B14683E_g, c_unitCountAll);
        for (;; auto8B14683E_u -= 1) {
            auto8B14683E_var = UnitGroupUnitFromEnd(auto8B14683E_g, auto8B14683E_u);
            if (auto8B14683E_var == null) { break; }
            if ((UnitGetOwner(auto8B14683E_var) != 1)) {
                libDE1190BD_gf_PointAoE(auto8B14683E_var, AbilityCommand("VoidHighTemplarPsiOrb", 0), 5, 8);
                libDE1190BD_gf_SingleTarget(auto8B14683E_var, AbilityCommand("VoidHighTemplarMindBlast", 0), c_unitPropLife, 135, 9);
            }

        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDE1190BD_gt_Ascendent_Init () {
    libDE1190BD_gt_Ascendent = TriggerCreate("libDE1190BD_gt_Ascendent_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wrathwalker
//--------------------------------------------------------------------------------------------------
bool libDE1190BD_gt_Wrathwalker_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC00DD224_g;
    int autoC00DD224_u;
    unit autoC00DD224_var;

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        autoC00DD224_g = UnitGroup("ColossusTaldarim", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoC00DD224_u = UnitGroupCount(autoC00DD224_g, c_unitCountAll);
        for (;; autoC00DD224_u -= 1) {
            autoC00DD224_var = UnitGroupUnitFromEnd(autoC00DD224_g, autoC00DD224_u);
            if (autoC00DD224_var == null) { break; }
            if ((UnitGetOwner(autoC00DD224_var) != 1) && (UnitGroupCount(UnitGroupAlliance(UnitGetOwner(autoC00DD224_var), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(autoC00DD224_var), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 1) && (UnitGetType(AILastAttacker(autoC00DD224_var)) != "SiegeTankSieged")) {
                UnitIssueOrder(autoC00DD224_var, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(autoC00DD224_var), -2.0, UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(UnitGetOwner(autoC00DD224_var), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(autoC00DD224_var), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)))), c_orderQueueAddToFront);
                UnitIssueOrder(autoC00DD224_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(UnitGetOwner(autoC00DD224_var), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(autoC00DD224_var), 14.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueAddToEnd);
            }

        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDE1190BD_gt_Wrathwalker_Init () {
    libDE1190BD_gt_Wrathwalker = TriggerCreate("libDE1190BD_gt_Wrathwalker_Func");
}

void libDE1190BD_InitTriggers () {
    libDE1190BD_gt_LowerThanBrutal_Init();
    libDE1190BD_gt_ForceCheater_Init();
    libDE1190BD_gt_RunAllCustomAI_Init();
    libDE1190BD_gt_RunZergAI_Init();
    libDE1190BD_gt_RunTerranAI_Init();
    libDE1190BD_gt_RunProtossAI_Init();
    libDE1190BD_gt_Infestor_Init();
    libDE1190BD_gt_BroodQueen_Init();
    libDE1190BD_gt_Brutalisk_Init();
    libDE1190BD_gt_Marine_Init();
    libDE1190BD_gt_Reaper_Init();
    libDE1190BD_gt_Ghost_Init();
    libDE1190BD_gt_Banshee_Init();
    libDE1190BD_gt_Wraith_Init();
    libDE1190BD_gt_Raven_Init();
    libDE1190BD_gt_Stalker_Init();
    libDE1190BD_gt_HighTemplar_Init();
    libDE1190BD_gt_Ascendent_Init();
    libDE1190BD_gt_Wrathwalker_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libDE1190BD_InitLib_completed = false;

void libDE1190BD_InitLib () {
    if (libDE1190BD_InitLib_completed) {
        return;
    }

    libDE1190BD_InitLib_completed = true;

    libDE1190BD_InitLibraries();
    libDE1190BD_InitTriggers();
}

